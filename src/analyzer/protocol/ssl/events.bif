## Generated for an SSL/TLS client's initial *hello* message.  SSL/TLS sessions
## start with an unencrypted handshake, and Bro extracts as much information out
## of that as it can. This event provides access to the initial information
## sent by the client.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Transport_Layer_Security>`__ for
## more information about the SSL/TLS protocol.
##
## c: The connection.
##
## version: The protocol version as extracted from the client's message.  The
##          values are standardized as part of the SSL/TLS protocol. The
##          :bro:id:`SSL::version_strings` table maps them to descriptive names.
##
## possible_ts: The current time as sent by the client. Note that SSL/TLS does
##              not require clocks to be set correctly, so treat with care.
##
## session_id: The session ID sent by the client (if any).
##
## client_random: The random value sent by the client. For version 2 connections,
##		  the client challenge is returned.
##
## ciphers: The list of ciphers the client offered to use. The values are
##          standardized as part of the SSL/TLS protocol. The
##          :bro:id:`SSL::cipher_desc` table maps them to descriptive names.
##
## .. bro:see:: ssl_alert  ssl_established ssl_extension ssl_server_hello
##    ssl_session_ticket_handshake x509_certificate
event ssl_client_hello%(c: connection, version: count, possible_ts: time, client_random: string, session_id: string, ciphers: index_vec%);

## Generated for an SSL/TLS server's initial *hello* message. SSL/TLS sessions
## start with an unencrypted handshake, and Bro extracts as much information out
## of that as it can. This event provides access to the initial information
## sent by the client.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Transport_Layer_Security>`__ for
## more information about the SSL/TLS protocol.
##
## c: The connection.
##
## version: The protocol version as extracted from the server's message.
##          The values are standardized as part of the SSL/TLS protocol. The
##          :bro:id:`SSL::version_strings` table maps them to descriptive names.
##
## possible_ts: The current time as sent by the server. Note that SSL/TLS does
##              not require clocks to be set correctly, so treat with care.
##
## session_id: The session ID as sent back by the server (if any).
##
## server_random: The random value sent by the server. For version 2 connections,
##		  the connection-id is returned.
##
## cipher: The cipher chosen by the server.  The values are standardized as part
##         of the SSL/TLS protocol. The :bro:id:`SSL::cipher_desc` table maps
##         them to descriptive names.
##
## comp_method: The compression method chosen by the client. The values are
##              standardized as part of the SSL/TLS protocol.
##
## .. bro:see:: ssl_alert ssl_client_hello ssl_established ssl_extension
##    ssl_session_ticket_handshake x509_certificate
event ssl_server_hello%(c: connection, version: count, possible_ts: time, server_random: string, session_id: string, cipher: count, comp_method: count%);

## Generated for SSL/TLS extensions seen in an initial handshake.  SSL/TLS
## sessions start with an unencrypted handshake, and Bro extracts as much
## information out of that as it can. This event provides access to any
## extensions either side sends as part of an extended *hello* message.
##
## c: The connection.
##
## is_orig: True if event is raised for originator side of the connection.
##
## code: The numerical code of the extension.  The values are standardized as
##       part of the SSL/TLS protocol. The :bro:id:`SSL::extensions` table maps
##       them to descriptive names.
##
## val: The raw extension value that was sent in the message.
##
## .. bro:see:: ssl_alert ssl_client_hello ssl_established ssl_server_hello
##    ssl_session_ticket_handshake
event ssl_extension%(c: connection, is_orig: bool, code: count, val: string%);

## Generated at the end of an SSL/TLS handshake. SSL/TLS sessions start with
## an unencrypted handshake, and Bro extracts as much information out of that
## as it can. This event signals the time when an SSL/TLS has finished the
## handshake and its endpoints consider it as fully established. Typically,
## everything from now on will be encrypted.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Transport_Layer_Security>`__ for
## more information about the SSL/TLS protocol.
##
## c: The connection.
##
## .. bro:see:: ssl_alert ssl_client_hello  ssl_extension ssl_server_hello
##    ssl_session_ticket_handshake x509_certificate
event ssl_established%(c: connection%);

## Generated for SSL/TLS alert records. SSL/TLS sessions start with an
## unencrypted handshake, and Bro extracts as much information out of that as
## it can. If during that handshake, an endpoint encounters a fatal error, it
## sends an *alert* record, that in turn triggers this event. After an *alert*,
## any endpoint may close the connection immediately.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Transport_Layer_Security>`__ for
## more information about the SSL/TLS protocol.
##
## c: The connection.
##
## is_orig: True if event is raised for originator side of the connection.
##
## level: The severity level, as sent in the *alert*. The values are defined as
##        part of the SSL/TLS protocol.
##
## desc: A numerical value identifying the cause of the *alert*. The values are
##       defined as part of the SSL/TLS protocol.
##
## .. bro:see::  ssl_client_hello ssl_established ssl_extension ssl_server_hello
##    ssl_session_ticket_handshake
event ssl_alert%(c: connection, is_orig: bool, level: count, desc: count%);

## Generated for SSL/TLS handshake messages that are a part of the
## stateless-server session resumption mechanism. SSL/TLS sessions start with
## an unencrypted handshake, and Bro extracts as much information out of that
## as it can. This event is raised when an SSL/TLS server passes a session
## ticket to the client that can later be used for resuming the session. The
## mechanism is described in :rfc:`4507`.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Transport_Layer_Security>`__ for
## more information about the SSL/TLS protocol.
##
## c: The connection.
##
## ticket_lifetime_hint: A hint from the server about how long the ticket
##                       should be stored by the client.
##
## ticket: The raw ticket data.
##
## .. bro:see::  ssl_client_hello ssl_established ssl_extension ssl_server_hello
##    ssl_alert
event ssl_session_ticket_handshake%(c: connection, ticket_lifetime_hint: count, ticket: string%);
