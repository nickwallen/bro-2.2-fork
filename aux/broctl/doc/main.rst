..	-*- mode: rst-mode -*-
..
.. Note: This file includes further autogenerated ones.
..
.. Version number is filled in automatically.
.. |version| replace:: 1.2-106

==========
BroControl
==========

.. rst-class:: opening

    This document summarizes installation and use of *BroControl*,
    Bro's interactive shell for operating Bro installations. *BroControl*
    has two modes of operation: a *stand-alone* mode for
    managing a traditional, single-system Bro setup; and a *cluster*
    mode for maintaining a multi-system setup of coordinated Bro
    instances load-balancing the work across a set of independent
    machines. Below, we describe the installation process separately
    for the two modes. Once installed, the operation is pretty similar
    for both types; just keep in mind that if this document refers to
    "nodes" and you're in a stand-alone setup, there is only a
    single one and no worker/proxies.

.. contents::

Download
--------

You can find the latest BroControl release for download at
http://www.bro.org/download.

BroControl's git repository is located at
`git://git.bro.org/broctl <git://git.bro.org/broctl>`_. You
can browse the repository `here <http://git.bro.org/broctl.git>`_.

This document describes BroControl |version|. See the ``CHANGES``
file for version history.

Prerequisites
-------------

Running *BroControl* requires the following prerequisites:

  - A Unix system. FreeBSD, Linux, and Mac OS X are supported and
    should work out of the box. Other Unix systems will quite likely
    require some tweaking. Note that in a cluster setup, all systems
    must be running exactly the *same* operating system.

  - A version of *Python* >= 2.6.

  - A *bash* (note in particular, that on FreeBSD, *bash* is not
    installed by default).

  - In a cluster setup, *rsync* must be installed on every host
    in the cluster.  In addition, *sshd* must be installed and running on
    every host except the manager, and *ssh* must be installed on the manager.

Installation
------------

First, follow the directions to install Bro and BroControl according to
the instructions in the :doc:`Installing Bro <../../install/install>`
documentation.  Note that if you are planning to run Bro in a cluster
configuration, then you need to install Bro and BroControl only on the
manager host (the BroControl install_ command will install Bro and all
required scripts to the other hosts in your cluster).

Stand-alone Bro
~~~~~~~~~~~~~~~

To configure a stand-alone Bro setup, just follow the
Bro :doc:`Quick Start Guide <../../quickstart/index>`.

Bro Cluster
~~~~~~~~~~~

A *Bro Cluster* is a set of systems jointly analyzing the traffic of
a network link in a coordinated fashion. *BroControl* is able to
operate such a setup from a central manager system pretty much
transparently, hiding much of the complexity of the multi-machine
installation.

A cluster consists of four types of components:

  Frontends.
     One or more frontends: Frontends load-balance the traffic
     across a set of worker machines.

  Worker nodes.
       Workers are doing the actual analysis, with each seeing a
       slice of the overall traffic as split by the frontend(s).

  One or more proxies.
       Proxies relay the communication between worker nodes.

  One manager.
       The manager provides the cluster's user-interface for
       controlling and logging. During operation, the user only
       interacts with the manager; this is where *BroControl* is
       running.

For more information about the cluster architecture, including options
for the frontend, see the :doc:`Bro Cluster <../../cluster/index>`
documentation.

This document focuses on the installation of manager,
workers, and the proxies. If not otherwise
stated, in the following we use the terms "manager", "worker", and
"proxy" to refer to Bro instances, not to physical machines; rather,
we use the term "node" to refer to physical machines. There may be
multiple Bro instances running on the same node. For example, it's
possible to run a proxy on the same node as the manager is operating
on.

When installing a cluster, in addition to the prerequisites
mentioned above, you need to

  - have the same user account set up on all nodes. On the worker
    nodes, this user must have access to target network interface in
    promiscuous mode. ``ssh`` access from the manager node to this
    user account must be setup on all machines, and must work
    without asking for a password/passphrase (for example, using ssh
    public key authentication).

  - have some storage available on all nodes under the same path,
    which we will call the cluster's *prefix* path. In this document,
    we refer to this directory as ``<prefix>`` (if you build Bro from
    source, then ``<prefix>`` is the directory specified
    with the ``--prefix`` configure option, or ``/usr/local/bro`` by default).
    The Bro user must be able to either create this directory or, where it
    already exists, must have write permission inside this directory
    on all nodes.

  - if you want to use PF_RING load balancing, then follow the
    instructions on `how to configure Bro with PF_RING
    <http://bro.org/documentation/load-balancing.html>`_.

With all prerequisites in place, perform the following steps to install
a Bro cluster (do this as the Bro user on the manager host only):

- Create a BroControl configuration file. There is an example provided,
  which you can edit according to the instructions in the file::

  > cd <prefix>
  > vi etc/broctl.cfg

- Create a node configuration file to define where manager, workers,
  and proxies are to run. There is again an example, which can be edited
  as needed::

  > cd <prefix>
  > vi etc/node.cfg

- Create a network configuration file that lists all of the networks
  which the cluster should consider as local to the monitored
  environment. Once again, the installation installs a template for
  editing::

    > cd <prefix>
    > vi etc/networks.cfg

- Install workers and proxies using *BroControl*::

    > broctl install

  This installation process uses ``ssh`` and ``rsync`` to copy the
  configuration over to the remote machines so, as described above,
  you need to ensure that logging in via SSH works before the install will
  succeed.

- Some tasks need to be run on a regular basis. On the manager node,
  insert a line like this into the crontab of the user running the
  cluster::

      0-59/5 * * * * <prefix>/bin/broctl cron

  (Note: if you are editing the system crontab instead of a user's own 
  crontab, then you need to also specify the user which the command
  will be run as. The username must be placed after the time fields
  and before the broctl command.)

  Note that on some systems (FreeBSD in particular), the default PATH
  for cron jobs does not include the directories where bash and python
  are installed (the symptoms of this problem would be that "broctl cron"
  works when run directly by the user, but does not work from cron).
  To solve this problem, you would either need to create symlinks
  to bash and python in a directory that is in the default PATH for
  cron jobs, or specify PATH in the crontab.


Getting Started
---------------

*BroControl* is an interactive interface for managing a Bro installation
which allows you to, e.g., start/stop the monitoring or update its
configuration.  It is started with the ``broctl`` script and then expects
commands on its command-line (alternatively, ``broctl`` can also be started
with a single command directly on the shell's command line, such as
``broctl help``)::

  > broctl
  Welcome to BroControl x.y

  Type "help" for help.

  [BroControl] >

As the message says, type help_ to see a list of
all commands. We will now briefly summarize the most important
commands. A full reference follows `Command Reference`_.

Once ``broctl.cfg`` and ``node.cfg`` are set up and "broctl install" has
been run as described above,
the monitoring can be started with the start_ command. In the cluster
setup, this will successively start manager, proxies, and workers. The
status_ command should then show all nodes as "running". If any nodes
have a status of "crashed", then use the diag_ command to see diagnostic
information (you can specify the name of the crashed node as an argument
to the diag command to show diagnostics for only that one node).  To stop
the monitoring, issue the stop_ command. After all
nodes have stopped, the status_ command should show all nodes as "stopped".
exit_ leaves the shell.

Whenever the *BroControl* configuration is modified in any way
(including changes to configuration files and site-specific policy
scripts, or upgrading to a new version of Bro or BroControl), install_ must
be used to install the new version. *No changes will
take effect until* install_ *is run*. Before you run install_, check_ can be
used to check for any potential errors in the new configuration, e.g.,
typos in scripts. If check_ does not report any problems, doing
install_ will pretty likely not break anything.

Note that generally configuration changes only take effect after a
restart of the affected nodes. The restart_ command triggers this.
Some changes however can be put into effect on-the-fly without
restarting any of the nodes by using the update_ command (again only
after doing install_ first). Such dynamic updates generally work with
all changes done which only modify const variables declared as
*redefinable* (i.e., with Bro's *&redef* attribute).

*BroControl* provides various options to control the behavior of
the setup. These options can be set by editing ``broctl.cfg`` (the
option names are case-insensitive).
The config_ command gives a list of all options
with their current values. A list of the most important options also
follows `Option Reference`_.

On the manager system (and on the stand-alone system), you find the
current set of (aggregated) logs in ``logs/current`` (which is a
symlink to the corresponding spool directory). The proxies and workers
log into ``spool/proxy/`` and ``spool/<worker-name>/``, respectively.
The manager/stand-alone logs are archived in ``logs/``, by default
once a day. Log files of workers and proxies are discarded at the
same rotation interval.

Site-specific Customization
---------------------------

You'll most likely want to adapt the Bro policy to the local
environment and generally site-specific tuning requires writing
local policy scripts.

During the initial install, sample local policy scripts (which you can edit)
are installed in ``share/bro/site``. In the stand-alone setup, a single
file called ``local.bro`` gets loaded automatically.  In the cluster
setup, the same ``local.bro`` gets loaded, followed by one of three
other files: ``local-manager.bro``, ``local-worker.bro``, and
``local-proxy.bro`` are loaded by the manager, workers, and proxy,
respectively.

In the cluster setup, the main exception to putting everything into
``local.bro`` is notice filtering, which should be done only on the
manager.

The next scripts that are loaded are the ones that are automatically
generated by BroControl.  These scripts are created from the
``networks.cfg`` and ``broctl.cfg`` files.

The last scripts loaded are any node-specific scripts specified with the
option ``aux_scripts`` in ``node.cfg``.  This option can be used to
load additional scripts to individual nodes only.  For example, one could
add a script ``experimental.bro`` to a single worker for trying out new
experimental code.

The scripts_ command shows precisely which policy scripts get loaded (and
in what order) by a node; that can be very helpful.

If you want to change which local policy scripts are loaded by the nodes,
you can set SitePolicyStandalone_ for all Bro instances,
SitePolicyManager_ for the manager, and SitePolicyWorker_ for the
workers.  To change the directory where local policy scripts are
located, set the option SitePolicyPath_ to a different path.  These
options can be changed in the ``broctl.cfg`` file.

Command Reference
-----------------

The following summary lists all commands supported by *BroControl*.
All commands may be either entered interactively or specified on the
shell's command line. If not specified otherwise, commands taking
*[<nodes>]* as arguments apply their action either to the given set of
nodes, to the manager node if "manager" is given, to all proxy nodes if
"proxies" is given, to all worker nodes if "workers" is given, or to all
nodes if none are given.

.. include:: commands.rst

Option Reference
----------------

This section summarizes the options that can be set in ``broctl.cfg``
for customizing the behavior of *BroControl* (the option names are
case-insensitive). Usually, one only needs
to change the "user options", which are listed first. The "internal
options" are, as the name suggests, primarily used internally and set
automatically. They are documented here only for reference.

.. include:: options.rst

Writing Plugins
---------------

BroControl provides a plugin interface to extend its functionality. A
plugin is written in Python and can do any, or all, of the following:

    * Perform actions before or after any of the standard BroControl
      commands is executed. When running before the actual command, it
      can filter which nodes to operate or stop the execution
      altogether. When running after the command, it gets access to
      the commands success on a per-node basis (where applicable).

    * Add custom commands to BroControl.

    * Add custom options to BroControl defined in ``broctl.cfg``.

    * Add custom keys to nodes defined in ``node.cfg``.

A plugin is written by deriving a new class from BroControl class
`Plugin`_. The Python script with the new plugin is then copied into a
plugin directory searched by BroControl at startup. By default,
BroControl searches ``<prefix>/lib/broctl/plugins``; additional directories
may be configured by setting the SitePluginPath_ option. Note that any plugin
script must end in ``*.py`` to be found. BroControl comes with some
example plugins that can be used as a starting point; see
the ``<prefix>/lib/broctl/plugins`` directory.

In the following, we document the API that is available to plugins. A
plugin must be derived from the `Plugin`_ class, and can use its
methods as well as those of the `Node`_ class.

.. include:: plugins.rst

Miscellaneous
-------------

Mails
~~~~~

*BroControl* sends three types of mails to the address given in
``MailTo``:

1. When the ``cron`` command runs it performs various tasks (such as
   checking available disk space, expiring old log files, etc.).  If
   any problems occur, a list of those issues will be sent.

2. When the ``cron`` command notices that a node has crashed, it
   restarts it and sends a notification. It may also send a more
   detailed crash report containing information about the crash.

3. If `trace-summary <http://www.bro.org/sphinx/components/trace-summary/README.html>`_
   is installed, a traffic summary is sent each rotation interval. This
   can be disabled by setting ``MailConnectionSummary=0``.

Performance Analysis
~~~~~~~~~~~~~~~~~~~~

*TODO*: ``broctl cron`` logs a number of statistics, which can be
analyzed/plotted for understanding the clusters run-time behavior.

.. _FAQ:

Questions and Answers
---------------------

*Can I use an NFS-mounted partition as the cluster's base directory to avoid the ``rsync``'ing?*
    Yes. BroBase_ can be on an NFS partition.
    Configure and install the shell as usual with
    ``--prefix=<BroBase>``. Then add ``HaveNFS=1`` and
    ``SpoolDir=<spath>`` to ``broctl.cfg``, where ``<spath>`` is a
    path on the local disks of the nodes; ``<spath>`` will be used for
    all non-shared data (make sure that the parent directory exists
    and is writable on all nodes!). Then run ``make install`` again.
    Finally, you can remove ``<BroBase>/spool`` (or link it to <spath>).
    In addition, you might want to keep the log files locally on the nodes
    as well by setting LogDir_ to a non-NFS directory. (Only
    the manager's logs will be kept permanently, the logs of
    workers/proxies are discarded upon rotation.)

*When I'm using the stand-alone mode, do I still need to have ``ssh`` and ``rsync`` installed and configured?*
    No. In stand-alone mode all operations are performed directly on the local
    file system.

*What do I need to do when something in the Bro distribution changes?*
    After pulling from the main Bro git repository, just re-run ``make
    install`` inside your build directory.  It will reinstall all the
    files from the distribution that are not up-to-date. Then do
    ``broctl install`` to make sure everything gets pushed out.

*Can I change the naming scheme that BroControl uses for archived log files?*
    Yes, set MakeArchiveName_ to a
    script that outputs the desired destination file name for an
    archived log file. The default script for that task is
    ``<BroBase>/share/broctl/scripts/make-archive-name``, which you
    can use as a template for creating your own version. See
    the beginning of that script for instructions.

*Can BroControl manage a cluster of nodes over non-global IPv6 scope (e.g. link-local)?*
    Yes, set ``ZoneID`` in ``broctl.cfg`` to the zone identifier
    that the BroControl node uses to identify the scope zone
    (the ``ifconfig`` command output is usually helpful, if it doesn't
    show the zone identifier appended to the address with a '%'
    character, then it may just be the interface name).  Then in
    ``node.cfg``, add a ``zone_id`` key to each node section
    representing that particular node's zone identifier and set
    the ``host`` key to the IPv6 address assigned to the node within
    the scope zone.  Most nodes probably have the same ``zone_id``, but
    may not if their interface configuration differs.  See :rfc:`4007` for
    more information on IPv6 scoped addresses and zones.
